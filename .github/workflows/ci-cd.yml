name: CI/CD pipeline

on:
    push:
        branches: [ main ]
        paths-ignore:
            - 'kubernetes/deployment.yaml'
    pull_request:
        branches: [ main ]

jobs:
    test:
        name: unit testing
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: install node.js
              uses: actions/setup-node@v4
              with:
                node-version: '25'
                cache: 'npm'

            - name: install dependencies
              run: npm ci

            - name: test
              run: npm test || echo 'no tests for now!'

    lint:
        name: static code analysis
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: install node.js
              uses: actions/setup-node@v4
              with:
                node-version: '25'
                cache: 'npm'

            - name: install dependencies
              run: npm ci

            - name: run ESLint
              run: npm run lint

    build:
        name: build
        runs-on: ubuntu-latest
        needs: [test, lint]
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: install node.js
              uses: actions/setup-node@v4
              with:
                node-version: '25'
                cache: 'npm'

            - name: install dependencies
              run: npm ci

            - name: build project
              run: npm run build

            - name: upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                name: build-artifacts
                path: dist/

    docker:
        name: docker build and push
        runs-on: ubuntu-latest
        needs: [build]
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}
        outputs:
            image_tag: ${{ steps.set_output.outputs.image_tag }}

        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: download build artifacts
              uses: actions/download-artifact@v4
              with:
                name: build-artifacts
                path: dist/
            
            - name: set up docker buildx
              uses: docker/setup-buildx-action@v3

            - name: login to github container registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: extract metadata from docker
              id: meta
              uses: docker/metadata-action@v3
              with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                tags: |
                    type=sha,format=long
                    type=ref,event=branch
                    latest

            - name: build docker image
              uses: docker/build-push-action@v6
              with:
                context: .
                push: false
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                load: true

            - name: run trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
                format: 'table'
                exit-code: 1
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'CRITICAL,HIGH'

            - name: push docker image
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}

            - name: set image tag output
              id: set_output
              run: echo 'image_tag=$(echo ${{ github.sha }} | cut -c1-7)' >> $GITHUB_OUTPUT

    update-k8s:
        name: update kubernetes deployment
        runs-on: ubuntu-latest
        needs: [docker]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        steps:
            - name: checkout code
              uses: actions/checkout@v4
              with:
                token: ${{ secrets.GITHUB_TOKEN}}
        
            - name: setup git config
              run: |
                git config user.name "GitHub Actions"
                git config user.email "actions@github.com"
        
            - name: update kubernetes deployment file
              env:
                IMAGE_TAG: sha-${{ github.sha }}
                GITHUB_REPOSITORY: ${{ github.repository }}
                REGISTRY: ghcr.io
              run: |
                # define the new image with tag
                NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
                    
                # update the deployment file directly
                sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
                    
                # verify the change
                echo "updated deployment to use image: ${NEW_IMAGE}"
                grep -A 1 "image:" kubernetes/deployment.yaml
        
            - name: commit and push changes
              run: |
                git add kubernetes/deployment.yaml
                git commit -m "update kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "no changes to commit"
                git push









