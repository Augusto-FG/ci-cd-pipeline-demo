name: CI/CD pipeline

on:
    push:
        branches: [ main ]
        paths-ignore:
            - 'kubernetes/deployment.yaml'
    pull_request:
        branches: [ main ]
  workflow_dispatch: {}

jobs:
    test:
        name: unit testing
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: install node.js
              uses: actions/setup-node@v4
              with:
                node-version: '25'
                cache: 'npm'

            - name: install dependencies
              run: npm ci

            - name: test
              run: npm test || echo 'no tests for now!'

    lint:
        name: static code analysis
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: install node.js
              uses: actions/setup-node@v4
              with:
                node-version: '25'
                cache: 'npm'

            - name: install dependencies
              run: npm ci

            - name: run ESLint
              run: npm run lint

    build:
        name: build
        runs-on: ubuntu-latest
        needs: [test, lint]
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: install node.js
              uses: actions/setup-node@v4
              with:
                node-version: '25'
                cache: 'npm'

            - name: install dependencies
              run: npm ci

            - name: build project
              run: npm run build

            - name: upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                name: build-artifacts
                path: dist/

    docker:
        name: docker build and push
        runs-on: ubuntu-latest
        needs: [build]
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}
        outputs:
            image_tag: ${{ steps.set_output.outputs.image_tag }}

        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: download build artifacts
              uses: actions/download-artifact@v4
              with:
                name: build-artifacts
                path: dist/
            
            - name: set up docker buildx
              uses: docker/setup-buildx-action@v3

            - name: login to github container registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.TOKEN }}

            - name: extract metadata from docker
              id: meta
              uses: docker/metadata-action@v3
              with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                tags: |
                    type=sha,format=long
                    type=ref,event=branch
                    latest

            - name: build docker image
              uses: docker/build-push-action@v6
              with:
                context: .
                push: false
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                load: true

            - name: run trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
                format: 'table'
                exit-code: 1
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'CRITICAL,HIGH'
                trivyignores: '.trivyignore'

            - name: push docker image
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}

            - name: set image tag output
              id: set_output
              run: echo 'image_tag=$(echo ${{ github.sha }} | cut -c1-7)' >> $GITHUB_OUTPUT

    deploy-ec2:
        name: deploy to EC2 via SSH
        runs-on: ubuntu-latest
        needs: [docker]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        steps:
            - name: Set up SSH key
              run: |
                mkdir -p ~/.ssh
                echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa
                ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

            - name: Deploy container on EC2
              env:
                IMAGE_TAG: sha-${{ github.sha }}
              run: |
                ssh -o StrictHostKeyChecking=yes ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
                set -e
                docker pull ghcr.io/${{ github.repository }}:${IMAGE_TAG}
                docker stop ci-cd-demo || true
                docker rm ci-cd-demo || true
                docker run -d --name ci-cd-demo -p 80:80 --restart=unless-stopped ghcr.io/${{ github.repository }}:${IMAGE_TAG}
                EOF

    smoke-test:
        name: smoke test
        runs-on: ubuntu-latest
        needs: [deploy-ec2]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        steps:
            - name: Wait for app and check HTTP 200
              run: |
                for i in {1..20}; do
                  status=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:80 || echo "000")
                  echo "Attempt $i -> status $status"
                  if [ "$status" = "200" ]; then
                    echo "Service is healthy"
                    exit 0
                  fi
                  sleep 3
                done
                echo "Smoke test failed: service did not return 200"
                exit 1









